// Code generated by MockGen. DO NOT EDIT.
// Source: nvidia_grpc.pb.go

// Package mock_nvidia is a generated GoMock package.
package nvidia

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNVIDIAClient is a mock of NVIDIAClient interface.
type MockNVIDIAClient struct {
	ctrl     *gomock.Controller
	recorder *MockNVIDIAClientMockRecorder
}

// MockNVIDIAClientMockRecorder is the mock recorder for MockNVIDIAClient.
type MockNVIDIAClientMockRecorder struct {
	mock *MockNVIDIAClient
}

// NewMockNVIDIAClient creates a new mock instance.
func NewMockNVIDIAClient(ctrl *gomock.Controller) *MockNVIDIAClient {
	mock := &MockNVIDIAClient{ctrl: ctrl}
	mock.recorder = &MockNVIDIAClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNVIDIAClient) EXPECT() *MockNVIDIAClientMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockNVIDIAClient) Generate(ctx context.Context, in *NVIDIARequest, opts ...grpc.CallOption) (*NVIDIAResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(*NVIDIAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockNVIDIAClientMockRecorder) Generate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockNVIDIAClient)(nil).Generate), varargs...)
}

// MockNVIDIAServer is a mock of NVIDIAServer interface.
type MockNVIDIAServer struct {
	ctrl     *gomock.Controller
	recorder *MockNVIDIAServerMockRecorder
}

// MockNVIDIAServerMockRecorder is the mock recorder for MockNVIDIAServer.
type MockNVIDIAServerMockRecorder struct {
	mock *MockNVIDIAServer
}

// NewMockNVIDIAServer creates a new mock instance.
func NewMockNVIDIAServer(ctrl *gomock.Controller) *MockNVIDIAServer {
	mock := &MockNVIDIAServer{ctrl: ctrl}
	mock.recorder = &MockNVIDIAServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNVIDIAServer) EXPECT() *MockNVIDIAServerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockNVIDIAServer) Generate(arg0 context.Context, arg1 *NVIDIARequest) (*NVIDIAResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(*NVIDIAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockNVIDIAServerMockRecorder) Generate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockNVIDIAServer)(nil).Generate), arg0, arg1)
}

// mustEmbedUnimplementedNVIDIAServer mocks base method.
func (m *MockNVIDIAServer) mustEmbedUnimplementedNVIDIAServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNVIDIAServer")
}

// mustEmbedUnimplementedNVIDIAServer indicates an expected call of mustEmbedUnimplementedNVIDIAServer.
func (mr *MockNVIDIAServerMockRecorder) mustEmbedUnimplementedNVIDIAServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNVIDIAServer", reflect.TypeOf((*MockNVIDIAServer)(nil).mustEmbedUnimplementedNVIDIAServer))
}

// MockUnsafeNVIDIAServer is a mock of UnsafeNVIDIAServer interface.
type MockUnsafeNVIDIAServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNVIDIAServerMockRecorder
}

// MockUnsafeNVIDIAServerMockRecorder is the mock recorder for MockUnsafeNVIDIAServer.
type MockUnsafeNVIDIAServerMockRecorder struct {
	mock *MockUnsafeNVIDIAServer
}

// NewMockUnsafeNVIDIAServer creates a new mock instance.
func NewMockUnsafeNVIDIAServer(ctrl *gomock.Controller) *MockUnsafeNVIDIAServer {
	mock := &MockUnsafeNVIDIAServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNVIDIAServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNVIDIAServer) EXPECT() *MockUnsafeNVIDIAServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNVIDIAServer mocks base method.
func (m *MockUnsafeNVIDIAServer) mustEmbedUnimplementedNVIDIAServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNVIDIAServer")
}

// mustEmbedUnimplementedNVIDIAServer indicates an expected call of mustEmbedUnimplementedNVIDIAServer.
func (mr *MockUnsafeNVIDIAServerMockRecorder) mustEmbedUnimplementedNVIDIAServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNVIDIAServer", reflect.TypeOf((*MockUnsafeNVIDIAServer)(nil).mustEmbedUnimplementedNVIDIAServer))
}
